#!/usr/bin/env python3
"""
Extract simple question pillar weights from wellpath_score_runner_survey_v2.py
and generate SQL to populate wellpath_scoring_question_pillar_weights
"""

import sys
import re
from pathlib import Path

# Load the survey runner file
survey_file = Path(__file__).parent.parent / 'wellpath_score_runner_survey_v2.py'

with open(survey_file, 'r') as f:
    content = f.read()

# Extract QUESTION_CONFIG dictionary
match = re.search(r'QUESTION_CONFIG = \{(.*?)\n\}(?:\n|$)', content, re.DOTALL)
if not match:
    print("Could not find QUESTION_CONFIG")
    sys.exit(1)

# Parse the config (simple approach - look for question numbers and pillar_weights)
question_pattern = r'"(\d+\.\d+)":\s*\{[^}]*"pillar_weights":\s*(\{[^}]*\})'

simple_questions = []

for match in re.finditer(question_pattern, content):
    question_num = match.group(1)
    pillar_weights_str = match.group(2)

    # Skip if it has a score_fn (complex function)
    if '"score_fn"' in content[match.start():match.end() + 200]:
        continue

    # Parse pillar weights
    pillar_matches = re.findall(r'"([^"]+)":\s*(\d+)', pillar_weights_str)

    if pillar_matches:
        for pillar, weight in pillar_matches:
            if int(weight) > 0:  # Only include non-zero weights
                # Map shortened pillar names to full names
                pillar_map = {
                    "Nutrition": "Healthful Nutrition",
                    "Movement": "Movement + Exercise",
                    "Sleep": "Restorative Sleep",
                    "Cognitive": "Cognitive Health",
                    "Stress": "Stress Management",
                    "Connection": "Connection + Purpose",
                    "CoreCare": "Core Care"
                }
                full_pillar = pillar_map.get(pillar, pillar)
                simple_questions.append((question_num, full_pillar, int(weight)))

# Generate SQL
print("-- Simple question pillar weights extracted from wellpath_score_runner_survey_v2.py")
print("-- Generated by extract_simple_question_weights.py")
print()
print("INSERT INTO wellpath_scoring_question_pillar_weights (question_number, pillar_name, weight, notes)")
print("VALUES")

for i, (q_num, pillar, weight) in enumerate(simple_questions):
    comma = "," if i < len(simple_questions) - 1 else ";"
    print(f"    ('{q_num}', '{pillar}', {weight}, 'Imported from wellpath_score_runner_survey_v2.py'){comma}")

print()
print(f"-- Total: {len(simple_questions)} question-pillar mappings")
print()
print("-- Verify the import")
print("SELECT pillar_name, COUNT(*) as question_count, SUM(weight) as total_weight")
print("FROM wellpath_scoring_question_pillar_weights")
print("GROUP BY pillar_name")
print("ORDER BY pillar_name;")
